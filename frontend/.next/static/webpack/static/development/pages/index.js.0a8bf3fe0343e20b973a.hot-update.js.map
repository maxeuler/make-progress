{"version":3,"file":"static/webpack/static/development/pages/index.js.0a8bf3fe0343e20b973a.hot-update.js","sources":["webpack:///./components/ProgressForm.js","webpack:///./components/Task.js"],"sourcesContent":["import React, { Component } from 'react';\nimport styled from 'styled-components';\n\nexport const Form = styled.form`\n\tdisplay: flex;\n\twidth: 90%;\n\tbackground: ${props => props.theme.bright};\n\tjustify-content: space-evenly;\n\talign-items: center;\n\tpadding: 2rem;\n\tborder-radius: 3px;\n\tmargin: 1rem 0;\n\tlabel {\n\t\tpadding: 0 1rem;\n\t\twidth: 80%;\n\t\tfont-size: 1.4rem;\n\t\tinput {\n\t\t\tdisplay: block;\n\t\t\tmargin: 0.5rem 0;\n\t\t\twidth: 90%;\n\t\t\tline-height: 2;\n\t\t\tborder: 1px solid ${props => props.theme.border};\n\t\t\tborder-radius: 2px;\n\t\t\tfont-size: 1.5rem;\n\t\t}\n\t}\n\t#units {\n\t\twidth: 60px;\n\t}\n\tbutton {\n\t\twidth: 6rem;\n\t\tbackground: none;\n\t\tborder: 0;\n\t\tcolor: ${props => props.theme.dark};\n\t\tfont-size: 2rem;\n\t\tcursor: pointer;\n\t}\n`;\n\nclass ProgressForm extends Component {\n\tstate = {\n\t\tunits: 0,\n\t\tdescription: ''\n\t};\n\n\thandleChange = e => {\n\t\tconst { name, type, value } = e.target;\n\t\tlet val = type === 'number' ? parseFloat(value) : value;\n\t\tthis.setState({\n\t\t\t[name]: val\n\t\t});\n\t};\n\n\trender() {\n\t\tconst { task } = this.props;\n\t\treturn (\n\t\t\t<Form\n\t\t\t\tmethod=\"POST\"\n\t\t\t\tonSubmit={e => {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\tconst { units, description } = this.state;\n\t\t\t\t\t// if number field was empty units is NaN\n\t\t\t\t\t// we set it to 0\n\t\t\t\t\tconst validUnits = units ? units : 0;\n\t\t\t\t\tthis.props.addProgress(validUnits, description);\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<label htmlFor=\"units\">\n\t\t\t\t\tUnits\n\t\t\t\t\t<input\n\t\t\t\t\t\tname=\"units\"\n\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t\t\tvalue={this.state.units}\n\t\t\t\t\t\tmax={task.units - this.finishedUnits}\n\t\t\t\t\t/>\n\t\t\t\t</label>\n\t\t\t\t<label htmlFor=\"description\">\n\t\t\t\t\tDescription\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tname=\"description\"\n\t\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t\t\tvalue={this.state.description}\n\t\t\t\t\t/>\n\t\t\t\t</label>\n\t\t\t\t<button type=\"submit\">ADD</button>\n\t\t\t</Form>\n\t\t);\n\t}\n}\n\nexport default ProgressForm;\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport axios from 'axios';\nimport ProgressForm from './ProgressForm';\nimport ProgressBar from './ProgressBar';\n\nconst TaskHeader = styled.div`\n\twidth: 90%;\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: space-between;\n\tp {\n\t\tcolor: ${props => props.theme.bright};\n\t\tpadding: 0;\n\t\tmargin: 0;\n\t\tfont-size: 2rem;\n\t\tfont-weight: 300;\n\t}\n\t#title {\n\t\tfont-size: 3rem;\n\t\tfont-weight: 400;\n\t}\n`;\n\nconst Progress = styled.div`\n\tdisplay: flex;\n\theight: 50px;\n\tjustify-content: space-between;\n\talign-items: center;\n`;\n\nconst AddButton = styled.button`\n\twidth: 40px;\n\theight: 40px;\n\tmargin-right: 4rem;\n\tbackground: none;\n\tborder: 1px solid ${props => props.theme.bright};\n\tborder-radius: 20px;\n\tcolor: ${props => props.theme.bright};\n\tfont-size: 2rem;\n\tcursor: pointer;\n`;\n\nconst StyledTask = styled.div`\n\tmargin: 2rem 0;\n`;\n\nclass Task extends Component {\n\tstate = {\n\t\tshowForm: false\n\t};\n\n\ttoggleForm = () => {\n\t\tthis.setState(prevState => ({\n\t\t\tshowForm: !prevState.showForm\n\t\t}));\n\t};\n\n\taddProgress = async (units, description) => {\n\t\tconst { task } = this.props;\n\t\tif (task.finishedUnits + units > task.units) {\n\t\t\tunits = task.units - task.finishedUnits;\n\t\t}\n\t\tconst taskPromise = axios.post('http://localhost:8888/api/addSegments', {\n\t\t\tfinishedUnits: units,\n\t\t\ttask: this.props.task._id\n\t\t});\n\t\tconst segmentPromise = axios.post(\n\t\t\t'http://localhost:8888/api/createSegment',\n\t\t\t{\n\t\t\t\tunits,\n\t\t\t\tdescription\n\t\t\t}\n\t\t);\n\t\tconst [taskRes, segmentRes] = await Promise.all([\n\t\t\ttaskPromise,\n\t\t\tsegmentPromise\n\t\t]);\n\t\tthis.props.task.finishedUnits = taskRes.data.finishedUnits;\n\t\tthis.toggleForm();\n\t};\n\n\trender() {\n\t\tconst { task } = this.props;\n\t\treturn (\n\t\t\t<StyledTask>\n\t\t\t\t<TaskHeader>\n\t\t\t\t\t<p id=\"title\">{task.title}</p>\n\t\t\t\t\t<p>\n\t\t\t\t\t\t{task.finishedUnits} von {task.units} {task.unit}\n\t\t\t\t\t</p>\n\t\t\t\t</TaskHeader>\n\t\t\t\t<Progress>\n\t\t\t\t\t<ProgressBar finishedUnits={task.finishedUnits} units={task.units} />\n\t\t\t\t\t<AddButton onClick={this.toggleForm}>+</AddButton>\n\t\t\t\t</Progress>\n\t\t\t\t{this.state.showForm && (\n\t\t\t\t\t<ProgressForm addProgress={this.addProgress} task={task} />\n\t\t\t\t)}\n\t\t\t</StyledTask>\n\t\t);\n\t}\n}\n\nexport default Task;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AAGA;AAAA;AAeA;AAAA;AAYA;AAAA;AACA;AAKA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AAFA;AACA;AAIA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAGA;AACA;;;;;;AACA;AAAA;AACA;AADA;AAEA;AAEA;AACA;AACA;AADA;AAAA;AAAA;AAIA;AACA;AAAA;AACA;AAAA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;;;;AAlDA;AACA;AAoDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5FA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAAA;AAYA;AAOA;AAKA;AAAA;AAEA;AAAA;AAKA;AACA;AAGA;;;;;;;;;;;;;;;;;;AACA;AACA;AADA;AACA;AAGA;AACA;AAAA;AACA;AADA;AAAA;AAGA;AACA;;;;;;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AAGA;AACA;AAFA;AAXA;AAAA;AACA;AADA;AAAA;AAAA;AAgBA;AAAA;AAIA;AACA;AAAA;AACA;AAtBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;AAuBA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;;AAtDA;AACA;AAwDA;;;;A","sourceRoot":""}