{"version":3,"file":"static/webpack/static/development/pages/index.js.786b6b1897e60383a47e.hot-update.js","sources":["webpack:///./components/Task.js"],"sourcesContent":["import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport axios from 'axios';\nimport ProgressForm from './ProgressForm';\nimport ProgressBar from './ProgressBar';\nimport TaskDetails from './TaskDetails';\n\nconst TaskHeader = styled.div`\n  width: 90%;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin: 1rem 0;\n  color: #222;\n  p {\n    padding: 0;\n    margin: 0;\n    font-size: 2rem;\n    font-weight: 300;\n  }\n  #title {\n    font-size: 3rem;\n    font-weight: 400;\n  }\n`;\n\nconst Progress = styled.div`\n  display: flex;\n  height: 50px;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nconst AddButton = styled.button`\n  width: 40px;\n  height: 40px;\n  margin-right: 4rem;\n  background: none;\n  border: 1px solid ${props => props.theme.primary};\n  border-radius: 20px;\n  color: ${props => props.theme.primary};\n  font-size: 2rem;\n  outline: none;\n  cursor: pointer;\n`;\n\nconst StyledTask = styled.div`\n  margin: 2rem 0;\n`;\n\nconst DetailsButton = styled.button`\n  background: none;\n  border: 1px solid ${props => props.theme.primary};\n  border-radius: 3px;\n  color: ${props => props.theme.primary};\n  margin-left: 2rem;\n  font-size: 1.5rem;\n  outline: none;\n  cursor: pointer;\n`;\n\nconst DeleteButton = styled.button`\n  background: none;\n  border: none;\n  font-size: 3rem;\n  color: ${props => props.theme.primary};\n  margin-right: 1rem;\n  cursor: pointer;\n`;\n\nclass Task extends Component {\n  state = {\n    showForm: false,\n    showDetails: false,\n    segments: this.props.task.segments,\n  };\n\n  toggleForm = () => {\n    this.setState(prevState => ({\n      showForm: !prevState.showForm,\n    }));\n  };\n\n  addProgress = async (addedUnits, description) => {\n    const { task } = this.props;\n    let units = addedUnits;\n    if (task.finishedUnits + units > task.units) {\n      units = task.units - task.finishedUnits;\n    }\n    this.props.task.finishedUnits = task.finishedUnits + units;\n    this.toggleForm();\n\n    const taskPromise = axios.post('http://localhost:8888/api/addSegments', {\n      finishedUnits: units,\n      task: this.props.task._id,\n    });\n    const segmentPromise = axios.post(\n      'http://localhost:8888/api/createSegment',\n      {\n        units,\n        description,\n        task: task._id,\n      }\n    );\n    const [taskRes, segmentRes] = await Promise.all([\n      taskPromise,\n      segmentPromise,\n    ]);\n    this.setState(prevState => ({\n      segments: [...prevState.segments, Object.assign({}, segmentRes.data)],\n    }));\n    // TODO handle errors\n  };\n\n  toggleDetails = e => {\n    this.setState(prevState => ({ showDetails: !prevState.showDetails }));\n  };\n\n  render() {\n    const { task } = this.props;\n    return (\n      <StyledTask>\n        <TaskHeader>\n          <span style={{ display: 'flex' }}>\n            <DeleteButton onClick={() => this.props.delete(task._id)}>\n              &times;\n            </DeleteButton>\n            <p id=\"title\">{task.title}</p>\n            <DetailsButton onClick={this.toggleDetails}>\n              {this.state.showDetails ? 'Hide Details' : 'Show Details'}\n            </DetailsButton>\n          </span>\n          <p>\n            {task.finishedUnits} von {task.units} {task.unit}\n          </p>\n        </TaskHeader>\n        <Progress>\n          <ProgressBar finishedUnits={task.finishedUnits} units={task.units} />\n          {task.finishedUnits !== task.units && (\n            <AddButton name=\"addButton\" onClick={this.toggleForm}>\n              +\n            </AddButton>\n          )}\n        </Progress>\n        {this.state.showForm && (\n          <ProgressForm addProgress={this.addProgress} task={task} />\n        )}\n        {this.state.showDetails &&\n          (this.state.segments.length ? (\n            <TaskDetails segments={this.state.segments} unit={task.unit} />\n          ) : (\n            <TaskHeader>\n              <p id=\"title\">You have to do something first üèåüèº‚Äç</p>\n            </TaskHeader>\n          ))}\n      </StyledTask>\n    );\n  }\n}\n\nexport default Task;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAmBA;AAOA;AAKA;AAAA;AAEA;AAAA;AAMA;AAIA;AAEA;AAAA;AAEA;AAAA;AAOA;AAIA;AAAA;AACA;AAIA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AAAA;AACA;AADA;AAAA;AAGA;AACA;;;;;;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAGA;AACA;AACA;AAHA;AAfA;AAAA;AACA;AADA;AAAA;AAAA;AAqBA;AAAA;AACA;AAGA;AAAA;AACA;AADA;AAAA;AACA;AACA;AA3BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;AA8BA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;AACA;AAAA;AACA;AADA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;;;;AAvFA;AACA;AAyFA;;;;A","sourceRoot":""}